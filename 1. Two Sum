# two ways to do it, nested loop and hash map, edge case is when [5,5] = 10 and we pick the first element twice
# hash map: first put everything into the dic and then see if theres alredy a complement 


class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        # for i in range(0,len(nums)-1):
        #     for j in range(1,len(nums)):
        #         if nums[i] + nums[j] == target:
        #             if i== j:
        #                 continue

        #             else:
        #                 return i,j


        dic = {}

        for i in range(len(nums)):
            dic[nums[i]] = i

        for i in range(len(nums)):
            comple = target - nums[i]

            if comple in dic and dic[comple] != i :
                return dic[comple], i
